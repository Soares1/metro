"use strict";(self.webpackChunkmetro_website=self.webpackChunkmetro_website||[]).push([[5599],{65087:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var n=t(87462),r=t(63366),l=(t(67294),t(3905)),m=["components"],o={id:"resolution",title:"Module Resolution"},i=void 0,d={unversionedId:"resolution",id:"resolution",title:"Module Resolution",description:"Module resolution is the process of translating module names to module paths at build time. For example, if your project contains the code:",source:"@site/../docs/Resolution.md",sourceDirName:".",slug:"/resolution",permalink:"/docs/resolution",draft:!1,editUrl:"https://github.com/facebook/metro/edit/main/docs/../docs/Resolution.md",tags:[],version:"current",lastUpdatedAt:1730224955,formattedLastUpdatedAt:"Oct 29, 2024",frontMatter:{id:"resolution",title:"Module Resolution"},sidebar:"docs",previous:{title:"Caching",permalink:"/docs/caching"},next:{title:"Source Map Format",permalink:"/docs/source-map-format"}},s={},p=[{value:"Resolution algorithm",id:"resolution-algorithm",level:2},{value:"Resolution types",id:"resolution-types",level:3},{value:"Source file",id:"source-file",level:4},{value:"Asset files",id:"asset-files",level:4},{value:"Empty module",id:"empty-module",level:4},{value:"Algorithm",id:"algorithm",level:3},{value:"RESOLVE",id:"resolve",level:4},{value:"RESOLVE_MODULE",id:"resolve_module",level:4},{value:"RESOLVE_PACKAGE",id:"resolve_package",level:4},{value:"RESOLVE_PACKAGE_EXPORTS",id:"resolve_package_exports",level:4},{value:"RESOLVE_FILE",id:"resolve_file",level:4},{value:"RESOLVE_ASSET",id:"resolve_asset",level:4},{value:"RESOLVE_HASTE",id:"resolve_haste",level:4},{value:"BROWSER_SPEC_REDIRECTION",id:"browser_spec_redirection",level:4},{value:"Resolution context",id:"resolution-context",level:3},{value:"<code>assetExts: $ReadOnlySet&lt;string&gt;</code>",id:"assetexts-readonlysetstring",level:4},{value:"<code>dev: boolean</code>",id:"dev-boolean",level:4},{value:'<code>doesFileExist: string =&gt; boolean</code> <div class="label deprecated">Deprecated</div>',id:"doesfileexist-string--boolean-deprecated",level:4},{value:"<code>fileSystemLookup: string =&gt; {exists: true, type: &#39;f&#39;|&#39;d&#39;, realPath: string} | {exists: false}</code>",id:"filesystemlookup-string--exists-true-type-fd-realpath-string--exists-false",level:4},{value:"<code>nodeModulesPaths: $ReadOnlyArray&lt;string&gt;</code>",id:"nodemodulespaths-readonlyarraystring",level:4},{value:"<code>preferNativePlatform: boolean</code>",id:"prefernativeplatform-boolean",level:4},{value:'<code>redirectModulePath: string =&gt; string | false</code> <div class="label deprecated">Deprecated</div>',id:"redirectmodulepath-string--string--false-deprecated",level:4},{value:"<code>resolveAsset: (dirPath: string, assetName: string, extension: string) =&gt; ?$ReadOnlyArray&lt;string&gt;</code>",id:"resolveasset-dirpath-string-assetname-string-extension-string--readonlyarraystring",level:4},{value:"<code>sourceExts: $ReadOnlyArray&lt;string&gt;</code>",id:"sourceexts-readonlyarraystring",level:4},{value:"<code>mainFields: $ReadOnlyArray&lt;string&gt;</code>",id:"mainfields-readonlyarraystring",level:4},{value:"<code>getPackage: string =&gt; PackageJson</code>",id:"getpackage-string--packagejson",level:4},{value:'<code>getPackageForModule: (absoluteModulePath: string) =&gt; ?PackageInfo</code> <div class="label deprecated">Deprecated</div>',id:"getpackageformodule-absolutemodulepath-string--packageinfo-deprecated",level:4},{value:"<code>resolveHasteModule: string =&gt; ?string</code>",id:"resolvehastemodule-string--string",level:4},{value:"<code>resolveHastePackage: string =&gt; ?string</code>",id:"resolvehastepackage-string--string",level:4},{value:"<code>allowHaste: boolean</code>",id:"allowhaste-boolean",level:4},{value:"<code>disableHierarchicalLookup: boolean</code>",id:"disablehierarchicallookup-boolean",level:4},{value:"<code>extraNodeModules: ?{[string]: string}</code>",id:"extranodemodules-string-string",level:4},{value:"<code>originModulePath: string</code>",id:"originmodulepath-string",level:4},{value:"<code>customResolverOptions: {[string]: mixed}</code>",id:"customresolveroptions-string-mixed",level:4},{value:"<code>resolveRequest: CustomResolver</code>",id:"resolverequest-customresolver",level:4},{value:"<code>dependency: ?Dependency</code>",id:"dependency-dependency",level:4},{value:"Caching",id:"caching",level:2}],x={toc:p},u="wrapper";function c(e){var a=e.components,t=(0,r.Z)(e,m);return(0,l.mdx)(u,(0,n.Z)({},x,t,{components:a,mdxType:"MDXLayout"}),(0,l.mdx)("p",null,"Module resolution is the process of translating module names to module paths at build time. For example, if your project contains the code:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// src/App.js\nimport {View} from 'react-native';\n// ...\n")),(0,l.mdx)("p",null,"Metro needs to know where in your project to load the ",(0,l.mdx)("inlineCode",{parentName:"p"},"react-native")," module from. This will typically resolve to something like ",(0,l.mdx)("inlineCode",{parentName:"p"},"node_modules/react-native/index.js"),"."),(0,l.mdx)("p",null,"Likewise, if your project contains the (similar) code:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"// src/App.js\nimport Comp from './Component';\n// ...\n")),(0,l.mdx)("p",null,"Metro needs to understand that you are referring to, say, ",(0,l.mdx)("inlineCode",{parentName:"p"},"src/Component.js"),", and not another file named ",(0,l.mdx)("inlineCode",{parentName:"p"},"Component")," that may also exist elsewhere."),(0,l.mdx)("p",null,"Metro implements a version of ",(0,l.mdx)("a",{parentName:"p",href:"https://nodejs.org/api/modules.html#loading-from-node_modules-folders"},"Node's module resolution algorithm"),", augmented with additional Metro-specific features."),(0,l.mdx)("p",null,"These Metro-specific features include:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("strong",{parentName:"li"},"Haste"),": An opt-in mechanism for importing modules by their globally-unique name anywhere in the project, e.g. ",(0,l.mdx)("inlineCode",{parentName:"li"},"import Foo from 'Foo'"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("strong",{parentName:"li"},"Platform extensions"),": Used by ",(0,l.mdx)("a",{parentName:"li",href:"https://reactnative.dev/docs/platform-specific-code#platform-specific-extensions"},"React Native")," to allow developers to write platform-specific versions of their JavaScript modules."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("strong",{parentName:"li"},"Asset extensions and image resolutions"),": Used by ",(0,l.mdx)("a",{parentName:"li",href:"https://reactnative.dev/docs/images#static-image-resources"},"React Native")," to automatically select the best version of an image asset based on the device's screen density at runtime."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("strong",{parentName:"li"},"Custom resolvers"),": Metro integrators can provide their own resolver implementations to override almost everything about how modules are resolved.")),(0,l.mdx)("h2",{id:"resolution-algorithm"},"Resolution algorithm"),(0,l.mdx)("p",null,"Given a ",(0,l.mdx)("a",{parentName:"p",href:"#resolution-context"},"resolution context")," ",(0,l.mdx)("em",{parentName:"p"},"context"),", a module name ",(0,l.mdx)("em",{parentName:"p"},"moduleName"),", and an optional platform identifier ",(0,l.mdx)("em",{parentName:"p"},"platform"),", Metro's resolver performs ",(0,l.mdx)("a",{parentName:"p",href:"#resolve"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE")),"(",(0,l.mdx)("em",{parentName:"p"},"context"),", ",(0,l.mdx)("em",{parentName:"p"},"moduleName"),", ",(0,l.mdx)("em",{parentName:"p"},"platform"),"), which either returns one of the ",(0,l.mdx)("a",{parentName:"p",href:"#resolution-types"},"resolution types"),", or throws an error."),(0,l.mdx)("h3",{id:"resolution-types"},"Resolution types"),(0,l.mdx)("h4",{id:"source-file"},"Source file"),(0,l.mdx)("p",null,"The request is resolved to some absolute path representing a physical file on disk."),(0,l.mdx)("h4",{id:"asset-files"},"Asset files"),(0,l.mdx)("p",null,"The request is resolved to one or more absolute paths representing physical files on disk."),(0,l.mdx)("h4",{id:"empty-module"},"Empty module"),(0,l.mdx)("p",null,"The request is resolved to a built-in empty module, namely the one specified in ",(0,l.mdx)("a",{parentName:"p",href:"/docs/configuration#emptymodulepath"},(0,l.mdx)("inlineCode",{parentName:"a"},"resolver.emptyModulePath")),"."),(0,l.mdx)("h3",{id:"algorithm"},"Algorithm"),(0,l.mdx)("admonition",{type:"note"},(0,l.mdx)("p",{parentName:"admonition"},"These are the rules that Metro's default resolver follows. Refer to ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/facebook/metro/blob/main/packages/metro-resolver/src/resolve.js"},(0,l.mdx)("inlineCode",{parentName:"a"},"metro-resolver"),"'s source code")," for more details.")),(0,l.mdx)("h4",{id:"resolve"},"RESOLVE"),(0,l.mdx)("p",null,"Parameters: (",(0,l.mdx)("em",{parentName:"p"},"context"),", ",(0,l.mdx)("em",{parentName:"p"},"moduleName"),", ",(0,l.mdx)("em",{parentName:"p"},"platform"),")"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"If a ",(0,l.mdx)("a",{parentName:"li",href:"#resolverequest-customresolver"},"custom resolver")," is defined, then",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Return the result of the custom resolver."))),(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," is an absolute path, or equal to ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.'")," or ",(0,l.mdx)("inlineCode",{parentName:"li"},"'..'"),", or begins ",(0,l.mdx)("inlineCode",{parentName:"li"},"'./'")," or ",(0,l.mdx)("inlineCode",{parentName:"li"},"'../'"),(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Let ",(0,l.mdx)("em",{parentName:"li"},"absoluteModuleName")," be ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," if it is absolute path, otherwise the result of prepending the current directory (i.e. parent of ",(0,l.mdx)("a",{parentName:"li",href:"#originmodulepath-string"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.originModulePath")),") with ",(0,l.mdx)("em",{parentName:"li"},"moduleName"),"."),(0,l.mdx)("li",{parentName:"ol"},"Return the result of ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_module"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_MODULE")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"absoluteModuleName"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),"), or continue."))),(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," begins ",(0,l.mdx)("inlineCode",{parentName:"li"},"'#'"),(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Throw an error. This will be replaced with subpath imports support in a non-breaking future release."))),(0,l.mdx)("li",{parentName:"ol"},"Apply ",(0,l.mdx)("a",{parentName:"li",href:"#browser_spec_redirection"},(0,l.mdx)("strong",{parentName:"a"},"BROWSER_SPEC_REDIRECTION"))," to ",(0,l.mdx)("em",{parentName:"li"},"moduleName"),". If this is ",(0,l.mdx)("inlineCode",{parentName:"li"},"false"),":",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Return the empty module."))),(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("a",{parentName:"li",href:"#allowhaste-boolean"},"Haste resolutions are allowed"),", then",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Get the result of ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_haste"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_HASTE")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"moduleName"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),")."),(0,l.mdx)("li",{parentName:"ol"},"If resolved as a Haste package path, then",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Perform the algorithm for resolving a path (step 2 above). Throw an error if this resolution fails.\nFor example, if the Haste package path for ",(0,l.mdx)("inlineCode",{parentName:"li"},"'a/b'")," is ",(0,l.mdx)("inlineCode",{parentName:"li"},"foo/package.json"),", perform step 2 as if ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," was ",(0,l.mdx)("inlineCode",{parentName:"li"},"foo/c"),"."))))),(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("a",{parentName:"li",href:"#disableHierarchicalLookup-boolean"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.disableHierarchicalLookup"))," is not ",(0,l.mdx)("inlineCode",{parentName:"li"},"true"),", then",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Try resolving ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," under ",(0,l.mdx)("inlineCode",{parentName:"li"},"node_modules")," from the current directory (i.e. parent of ",(0,l.mdx)("a",{parentName:"li",href:"#originmodulepath-string"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.originModulePath")),") up to the root directory."),(0,l.mdx)("li",{parentName:"ol"},"Perform ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_package"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_PACKAGE")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"modulePath"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),") for each candidate path."))),(0,l.mdx)("li",{parentName:"ol"},"For each element ",(0,l.mdx)("em",{parentName:"li"},"nodeModulesPath")," of ",(0,l.mdx)("a",{parentName:"li",href:"#nodemodulespaths-readonlyarraystring"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.nodeModulesPaths")),":",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Try resolving ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," under ",(0,l.mdx)("em",{parentName:"li"},"nodeModulesPath")," as if the latter was another ",(0,l.mdx)("inlineCode",{parentName:"li"},"node_modules")," directory (similar to step 5 above)."),(0,l.mdx)("li",{parentName:"ol"},"Perform ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_package"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_PACKAGE")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"modulePath"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),") for each candidate path."))),(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("a",{parentName:"li",href:"#extranodemodules-string-string"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.extraNodeModules"))," is set:",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Split ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," into a package name (including an optional ",(0,l.mdx)("a",{parentName:"li",href:"https://docs.npmjs.com/cli/v8/using-npm/scope"},"scope"),") and relative path."),(0,l.mdx)("li",{parentName:"ol"},"Look up the package name in ",(0,l.mdx)("a",{parentName:"li",href:"#extranodemodules-string-string"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.extraNodeModules")),". If found, then",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Construct a path ",(0,l.mdx)("em",{parentName:"li"},"modulePath")," by replacing the package name part of ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," with the value found in ",(0,l.mdx)("a",{parentName:"li",href:"#extranodemodules-string-string"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.extraNodeModules"))),(0,l.mdx)("li",{parentName:"ol"},"Return the result of ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_package"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_PACKAGE")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"modulePath"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),")."))))),(0,l.mdx)("li",{parentName:"ol"},"If no valid resolution has been found, throw a resolution failure error.")),(0,l.mdx)("h4",{id:"resolve_module"},"RESOLVE_MODULE"),(0,l.mdx)("p",null,"Parameters: (",(0,l.mdx)("em",{parentName:"p"},"context"),", ",(0,l.mdx)("em",{parentName:"p"},"moduleName"),", ",(0,l.mdx)("em",{parentName:"p"},"platform"),")"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Let ",(0,l.mdx)("em",{parentName:"li"},"filePath")," be the result of applying ",(0,l.mdx)("a",{parentName:"li",href:"#browser_spec_redirection"},(0,l.mdx)("strong",{parentName:"a"},"BROWSER_SPEC_REDIRECTION"))," to ",(0,l.mdx)("em",{parentName:"li"},"moduleName"),". This may locate a replacement subpath from a containing ",(0,l.mdx)("inlineCode",{parentName:"li"},"package.json")," file based on the ",(0,l.mdx)("a",{parentName:"li",href:"https://github.com/defunctzombie/package-browser-field-spec"},(0,l.mdx)("inlineCode",{parentName:"a"},"browser")," field spec"),"."),(0,l.mdx)("li",{parentName:"ol"},"Return the result of ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_file"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_FILE")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"filePath"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),"), or continue."),(0,l.mdx)("li",{parentName:"ol"},"Otherwise, let ",(0,l.mdx)("em",{parentName:"li"},"dirPath")," be the directory path of ",(0,l.mdx)("em",{parentName:"li"},"filePath"),"."),(0,l.mdx)("li",{parentName:"ol"},"If a file ",(0,l.mdx)("em",{parentName:"li"},"dirPath")," + ",(0,l.mdx)("inlineCode",{parentName:"li"},"'package.json'")," exists, resolve based on the ",(0,l.mdx)("a",{parentName:"li",href:"https://github.com/defunctzombie/package-browser-field-spec"},(0,l.mdx)("inlineCode",{parentName:"a"},"browser")," field spec"),":",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Let ",(0,l.mdx)("em",{parentName:"li"},"mainModulePath")," be the result of reading the package's entry path using ",(0,l.mdx)("a",{parentName:"li",href:"#mainfields-readonlyarraystring"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.mainFields")),"."),(0,l.mdx)("li",{parentName:"ol"},"Return the result of ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_file"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_FILE")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"mainModulePath"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),"), or continue."),(0,l.mdx)("li",{parentName:"ol"},"Return the result of ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_file"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_FILE")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"mainModulePath")," + ",(0,l.mdx)("inlineCode",{parentName:"li"},"'/index'"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),")."),(0,l.mdx)("li",{parentName:"ol"},"Throw an error if no resolution could be found.")))),(0,l.mdx)("h4",{id:"resolve_package"},"RESOLVE_PACKAGE"),(0,l.mdx)("p",null,"Parameters: (",(0,l.mdx)("em",{parentName:"p"},"context"),", ",(0,l.mdx)("em",{parentName:"p"},"moduleName"),", ",(0,l.mdx)("em",{parentName:"p"},"platform"),")"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("inlineCode",{parentName:"li"},"context.enablePackageExports")," is enabled, and a containing ",(0,l.mdx)("inlineCode",{parentName:"li"},"package.json")," file contains the field ",(0,l.mdx)("inlineCode",{parentName:"li"},'"exports"'),", get result of ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_package-exports"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_PACKAGE_EXPORTS")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"packagePath"),", ",(0,l.mdx)("em",{parentName:"li"},"filePath"),", ",(0,l.mdx)("em",{parentName:"li"},"exportsField"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),").",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"If resolved path exists, return result."),(0,l.mdx)("li",{parentName:"ol"},"Else, log either a package configuration or package encapsulation warning."))),(0,l.mdx)("li",{parentName:"ol"},"Return the result of ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_module"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_MODULE")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"filePath"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),").")),(0,l.mdx)("h4",{id:"resolve_package_exports"},"RESOLVE_PACKAGE_EXPORTS"),(0,l.mdx)("p",null,"Parameters: (",(0,l.mdx)("em",{parentName:"p"},"context"),", ",(0,l.mdx)("em",{parentName:"p"},"packagePath"),", ",(0,l.mdx)("em",{parentName:"p"},"filePath"),", ",(0,l.mdx)("em",{parentName:"p"},"exportsField"),", ",(0,l.mdx)("em",{parentName:"p"},"platform"),")"),(0,l.mdx)("blockquote",null,(0,l.mdx)("p",{parentName:"blockquote"},"Resolves a package subpath based on the ",(0,l.mdx)("a",{parentName:"p",href:"https://nodejs.org/docs/latest-v19.x/api/packages.html#package-entry-points"},"Package Entry Points spec")," (the ",(0,l.mdx)("inlineCode",{parentName:"p"},'"exports"')," field), when ",(0,l.mdx)("a",{parentName:"p",href:"./configuration#unstable_enablepackageexports-experimental"},(0,l.mdx)("inlineCode",{parentName:"a"},"resolver.unstable_enablePackageExports"))," is enabled.")),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Let ",(0,l.mdx)("em",{parentName:"li"},"subpath")," be the relative path from ",(0,l.mdx)("em",{parentName:"li"},"packagePath")," to ",(0,l.mdx)("em",{parentName:"li"},"filePath"),", or ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.'"),"."),(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("em",{parentName:"li"},"exportsField")," contains an invalid configuration or values, raise an ",(0,l.mdx)("inlineCode",{parentName:"li"},"InvalidPackageConfigurationError"),"."),(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("em",{parentName:"li"},"subpath")," is not defined by ",(0,l.mdx)("em",{parentName:"li"},"exportsField"),", raise a ",(0,l.mdx)("inlineCode",{parentName:"li"},"PackagePathNotExportedError"),"."),(0,l.mdx)("li",{parentName:"ol"},"Let ",(0,l.mdx)("em",{parentName:"li"},"target")," be the result of matching ",(0,l.mdx)("em",{parentName:"li"},"subpath")," in ",(0,l.mdx)("em",{parentName:"li"},"exportsField")," after applying any ",(0,l.mdx)("a",{parentName:"li",href:"https://nodejs.org/docs/latest-v19.x/api/packages.html#conditional-exports"},"conditional exports")," and/or substituting a ",(0,l.mdx)("a",{parentName:"li",href:"https://nodejs.org/docs/latest-v19.x/api/packages.html#subpath-patterns"},"subpath pattern match"),".",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Condition names will be asserted from the union of ",(0,l.mdx)("inlineCode",{parentName:"li"},"context.unstable_conditionNames")," and ",(0,l.mdx)("inlineCode",{parentName:"li"},"context.unstable_conditionNamesByPlatform")," for ",(0,l.mdx)("em",{parentName:"li"},"platform"),", in the order defined by ",(0,l.mdx)("em",{parentName:"li"},"exportsField"),"."))),(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("em",{parentName:"li"},"target")," refers to an ",(0,l.mdx)("a",{parentName:"li",href:"#assetexts-readonlysetstring"},"asset"),", then",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Return the result of ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_asset"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_ASSET")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"target"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),")."))),(0,l.mdx)("li",{parentName:"ol"},"Return ",(0,l.mdx)("em",{parentName:"li"},"target")," as a ",(0,l.mdx)("a",{parentName:"li",href:"#source-file"},"source file resolution")," ",(0,l.mdx)("strong",{parentName:"li"},"without")," applying redirections or trying any platform or extension variants.")),(0,l.mdx)("h4",{id:"resolve_file"},"RESOLVE_FILE"),(0,l.mdx)("p",null,"Parameters: (",(0,l.mdx)("em",{parentName:"p"},"context"),", ",(0,l.mdx)("em",{parentName:"p"},"filePath"),", ",(0,l.mdx)("em",{parentName:"p"},"platform"),")"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"If the path refers to an ",(0,l.mdx)("a",{parentName:"li",href:"#assetexts-readonlysetstring"},"asset"),", then",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Return the result of ",(0,l.mdx)("a",{parentName:"li",href:"#resolve_asset"},(0,l.mdx)("strong",{parentName:"a"},"RESOLVE_ASSET")),"(",(0,l.mdx)("em",{parentName:"li"},"context"),", ",(0,l.mdx)("em",{parentName:"li"},"filePath"),", ",(0,l.mdx)("em",{parentName:"li"},"platform"),")."))),(0,l.mdx)("li",{parentName:"ol"},"Otherwise, if the path ",(0,l.mdx)("a",{parentName:"li",href:"#doesfileexist-string--boolean"},"exists"),", then",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Try all platform and extension variants in sequence. Return a ",(0,l.mdx)("a",{parentName:"li",href:"#source-file"},"source file resolution")," for the first one that ",(0,l.mdx)("a",{parentName:"li",href:"#doesfileexist-string--boolean"},"exists")," after applying ",(0,l.mdx)("a",{parentName:"li",href:"#browser_spec_redirection"},(0,l.mdx)("strong",{parentName:"a"},"BROWSER_SPEC_REDIRECTION")),". For example, if ",(0,l.mdx)("em",{parentName:"li"},"platform")," is ",(0,l.mdx)("inlineCode",{parentName:"li"},"android")," and ",(0,l.mdx)("a",{parentName:"li",href:"#sourceexts-readonlyarraystring"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.sourceExts"))," is ",(0,l.mdx)("inlineCode",{parentName:"li"},"['js', 'jsx']"),", try this sequence of potential file names:",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("em",{parentName:"li"},"moduleName")," + ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.android.js'")),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("em",{parentName:"li"},"moduleName")," + ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.native.js'")," (if ",(0,l.mdx)("a",{parentName:"li",href:"#prefernativeplatform-boolean"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.preferNativePlatform"))," is ",(0,l.mdx)("inlineCode",{parentName:"li"},"true"),")"),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("em",{parentName:"li"},"moduleName")," + ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.js'")),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("em",{parentName:"li"},"moduleName")," + ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.android.jsx'")),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("em",{parentName:"li"},"moduleName")," + ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.native.jsx'")," (if ",(0,l.mdx)("a",{parentName:"li",href:"#prefernativeplatform-boolean"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.preferNativePlatform"))," is ",(0,l.mdx)("inlineCode",{parentName:"li"},"true"),")"),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("em",{parentName:"li"},"moduleName")," + ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.jsx'"))))))),(0,l.mdx)("h4",{id:"resolve_asset"},"RESOLVE_ASSET"),(0,l.mdx)("p",null,"Parameters: (",(0,l.mdx)("em",{parentName:"p"},"context"),", ",(0,l.mdx)("em",{parentName:"p"},"filePath"),", ",(0,l.mdx)("em",{parentName:"p"},"platform"),")"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Use ",(0,l.mdx)("a",{parentName:"li",href:"#resolveasset-dirpath-string-assetname-string-extension-string--readonlyarraystring"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.resolveAsset"))," to collect all asset variants."),(0,l.mdx)("li",{parentName:"ol"},"Return an ",(0,l.mdx)("a",{parentName:"li",href:"#asset-files"},"asset resolution")," containing the collected asset paths.")),(0,l.mdx)("h4",{id:"resolve_haste"},"RESOLVE_HASTE"),(0,l.mdx)("p",null,"Parameters: (",(0,l.mdx)("em",{parentName:"p"},"context"),", ",(0,l.mdx)("em",{parentName:"p"},"moduleName"),", ",(0,l.mdx)("em",{parentName:"p"},"platform"),")"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Try resolving ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," as a ",(0,l.mdx)("a",{parentName:"li",href:"#resolvehastemodule-string--string"},"Haste module"),".\nIf found, then",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"Return result as a ",(0,l.mdx)("a",{parentName:"li",href:"#source-file"},"source file resolution")," ",(0,l.mdx)("strong",{parentName:"li"},"without")," applying redirections or trying any platform or extension variants."))),(0,l.mdx)("li",{parentName:"ol"},"Try resolving ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," as a ",(0,l.mdx)("a",{parentName:"li",href:"#resolvehastepackage-string--string"},"Haste (global) package"),", or a path ",(0,l.mdx)("em",{parentName:"li"},"relative")," to a Haste package.\nFor example, if ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," is ",(0,l.mdx)("inlineCode",{parentName:"li"},"'a/b/c'"),", try the following potential Haste package names:",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("inlineCode",{parentName:"li"},"'a/b/c'"),", relative path ",(0,l.mdx)("inlineCode",{parentName:"li"},"''")),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("inlineCode",{parentName:"li"},"'a/b'"),", relative path ",(0,l.mdx)("inlineCode",{parentName:"li"},"'./c'")),(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("inlineCode",{parentName:"li"},"'a'"),", with relative path ",(0,l.mdx)("inlineCode",{parentName:"li"},"'./b/c'"))))),(0,l.mdx)("h4",{id:"browser_spec_redirection"},"BROWSER_SPEC_REDIRECTION"),(0,l.mdx)("p",null,"Parameters: (",(0,l.mdx)("em",{parentName:"p"},"context"),", ",(0,l.mdx)("em",{parentName:"p"},"moduleName"),")"),(0,l.mdx)("p",null,"Based on ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/defunctzombie/package-browser-field-spec"},(0,l.mdx)("inlineCode",{parentName:"a"},"defunctzombie/package-browser-field-spec")),", apply redirections to specifiers, based on the closest ",(0,l.mdx)("inlineCode",{parentName:"p"},"package.json")," to the origin or target module."),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Find the closest ",(0,l.mdx)("inlineCode",{parentName:"li"},"package.json")," to ",(0,l.mdx)("em",{parentName:"li"},"moduleName"),", if ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," is absolute, or to ",(0,l.mdx)("a",{parentName:"li",href:"#originmodulepath-string"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.originModulePath"))," otherwise, stopping at any ",(0,l.mdx)("inlineCode",{parentName:"li"},"node_modules"),". Let ",(0,l.mdx)("em",{parentName:"li"},"packageScope")," be its containing directory."),(0,l.mdx)("li",{parentName:"ol"},"If none is found, return ",(0,l.mdx)("em",{parentName:"li"},"moduleName"),"."),(0,l.mdx)("li",{parentName:"ol"},"Define ",(0,l.mdx)("em",{parentName:"li"},"subpath"),":",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," begins ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.'"),", consider it relative to ",(0,l.mdx)("a",{parentName:"li",href:"#originmodulepath-string"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.originModulePath"))," and let ",(0,l.mdx)("em",{parentName:"li"},"subpath")," be the same path relative to ",(0,l.mdx)("em",{parentName:"li"},"packageScope"),", prefixed ",(0,l.mdx)("inlineCode",{parentName:"li"},"'./'"),"."),(0,l.mdx)("li",{parentName:"ol"},"Else if ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," is absolute, let ",(0,l.mdx)("em",{parentName:"li"},"subpath")," be ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," relative to ",(0,l.mdx)("em",{parentName:"li"},"packageScope"),", prefixed ",(0,l.mdx)("inlineCode",{parentName:"li"},"'./'"),"."),(0,l.mdx)("li",{parentName:"ol"},"Else let ",(0,l.mdx)("em",{parentName:"li"},"subpath")," be ",(0,l.mdx)("em",{parentName:"li"},"moduleName"),"."))),(0,l.mdx)("li",{parentName:"ol"},"Taking each of ",(0,l.mdx)("a",{parentName:"li",href:"#mainfields-readonlyarraystring"},(0,l.mdx)("inlineCode",{parentName:"a"},"context.mainFields"))," as a key, let ",(0,l.mdx)("em",{parentName:"li"},"mainFieldValue")," be the value at that key within the ",(0,l.mdx)("inlineCode",{parentName:"li"},"package.json")," at ",(0,l.mdx)("em",{parentName:"li"},"packageScope"),".",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("em",{parentName:"li"},"mainFieldValue")," is an object, let ",(0,l.mdx)("em",{parentName:"li"},"expandedSubPath")," range over ",(0,l.mdx)("em",{parentName:"li"},"subpath"),", ",(0,l.mdx)("em",{parentName:"li"},"subpath")," + ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.js'")," and ",(0,l.mdx)("em",{parentName:"li"},"subpath")," + ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.json'"),".",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("em",{parentName:"li"},"mainFieldValue")," has the key ",(0,l.mdx)("em",{parentName:"li"},"expandedSubpath"),", let ",(0,l.mdx)("em",{parentName:"li"},"redirectedPath")," be its value, else continue."),(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("em",{parentName:"li"},"moduleName")," is absolute or begins ",(0,l.mdx)("inlineCode",{parentName:"li"},"'.'"),", and ",(0,l.mdx)("em",{parentName:"li"},"redirectedPath")," is a string:",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},"If ",(0,l.mdx)("em",{parentName:"li"},"redirectedPath")," is an absolute path, return ",(0,l.mdx)("em",{parentName:"li"},"redirectedPath"),"."),(0,l.mdx)("li",{parentName:"ol"},"Return ",(0,l.mdx)("em",{parentName:"li"},"packageScope")," joined with ",(0,l.mdx)("em",{parentName:"li"},"redirectedPath"),"."))),(0,l.mdx)("li",{parentName:"ol"},"Return ",(0,l.mdx)("em",{parentName:"li"},"redirectedPath"),"."))))),(0,l.mdx)("li",{parentName:"ol"},"Return ",(0,l.mdx)("em",{parentName:"li"},"moduleName"),".")),(0,l.mdx)("h3",{id:"resolution-context"},"Resolution context"),(0,l.mdx)("h4",{id:"assetexts-readonlysetstring"},(0,l.mdx)("inlineCode",{parentName:"h4"},"assetExts: $ReadOnlySet<string>")),(0,l.mdx)("p",null,"The set of file extensions used to identify asset files. Defaults to ",(0,l.mdx)("a",{parentName:"p",href:"/docs/configuration#assetexts"},(0,l.mdx)("inlineCode",{parentName:"a"},"resolver.assetExts")),"."),(0,l.mdx)("h4",{id:"dev-boolean"},(0,l.mdx)("inlineCode",{parentName:"h4"},"dev: boolean")),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"true")," if the resolution is for a development bundle, or ",(0,l.mdx)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.mdx)("h4",{id:"doesfileexist-string--boolean-deprecated"},(0,l.mdx)("inlineCode",{parentName:"h4"},"doesFileExist: string => boolean")," ",(0,l.mdx)("div",{class:"label deprecated"},"Deprecated")),(0,l.mdx)("p",null,"Returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"true")," if the file with the given path exists, or ",(0,l.mdx)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.mdx)("p",null,"The default implementation wraps ",(0,l.mdx)("a",{parentName:"p",href:"#filesystemlookup-string--exists-true-type-fd-realpath-string--exists-false"},(0,l.mdx)("inlineCode",{parentName:"a"},"fileSystemLookup"))," - prefer using that directly."),(0,l.mdx)("h4",{id:"filesystemlookup-string--exists-true-type-fd-realpath-string--exists-false"},(0,l.mdx)("inlineCode",{parentName:"h4"},"fileSystemLookup: string => {exists: true, type: 'f'|'d', realPath: string} | {exists: false}")),(0,l.mdx)("p",null,(0,l.mdx)("em",{parentName:"p"},"Added in v0.81.0")),(0,l.mdx)("p",null,'Return information about the given absolute or project-relative path, following symlinks. A file "exists" if and only if it is watched, and a directory must be non-empty. The returned ',(0,l.mdx)("inlineCode",{parentName:"p"},"realPath")," is real and absolute."),(0,l.mdx)("p",null,"By default, Metro implements this by consulting an in-memory map of the filesystem that has been prepared in advance. This approach avoids disk I/O during module resolution and performs realpath resolution at negligible additional cost."),(0,l.mdx)("h4",{id:"nodemodulespaths-readonlyarraystring"},(0,l.mdx)("inlineCode",{parentName:"h4"},"nodeModulesPaths: $ReadOnlyArray<string>")),(0,l.mdx)("p",null,"A list of paths to check for modules after looking through all ",(0,l.mdx)("inlineCode",{parentName:"p"},"node_modules")," directories."),(0,l.mdx)("p",null,"By default this is set to ",(0,l.mdx)("a",{parentName:"p",href:"/docs/configuration#nodemodulespaths"},(0,l.mdx)("inlineCode",{parentName:"a"},"resolver.nodeModulesPaths"))),(0,l.mdx)("h4",{id:"prefernativeplatform-boolean"},(0,l.mdx)("inlineCode",{parentName:"h4"},"preferNativePlatform: boolean")),(0,l.mdx)("p",null,"If ",(0,l.mdx)("inlineCode",{parentName:"p"},"true"),", try ",(0,l.mdx)("inlineCode",{parentName:"p"},".native.${ext}")," before ",(0,l.mdx)("inlineCode",{parentName:"p"},".${ext}")," and after ",(0,l.mdx)("inlineCode",{parentName:"p"},".${platform}.${ext}")," during resolution. Metro sets this to ",(0,l.mdx)("inlineCode",{parentName:"p"},"true"),"."),(0,l.mdx)("h4",{id:"redirectmodulepath-string--string--false-deprecated"},(0,l.mdx)("inlineCode",{parentName:"h4"},"redirectModulePath: string => string | false")," ",(0,l.mdx)("div",{class:"label deprecated"},"Deprecated")),(0,l.mdx)("p",null,"The default implementation of this function is specified by ",(0,l.mdx)("a",{parentName:"p",href:"#browser_spec_redirection"},(0,l.mdx)("strong",{parentName:"a"},"BROWSER_SPEC_REDIRECTION")),"."),(0,l.mdx)("p",null,"Metro's default resolver does not call this function, instead using the ",(0,l.mdx)("a",{parentName:"p",href:"#browser_spec_redirection"},(0,l.mdx)("strong",{parentName:"a"},"BROWSER_SPEC_REDIRECTION"))," implementation directly. It is exposed here for backwards-compatible use by custom resolvers, but is considered deprecated and will be removed in a future release."),(0,l.mdx)("h4",{id:"resolveasset-dirpath-string-assetname-string-extension-string--readonlyarraystring"},(0,l.mdx)("inlineCode",{parentName:"h4"},"resolveAsset: (dirPath: string, assetName: string, extension: string) => ?$ReadOnlyArray<string>")),(0,l.mdx)("p",null,"Given a directory path, the base asset name and an extension, returns a list of all the asset file names that match the given base name in that directory, or ",(0,l.mdx)("inlineCode",{parentName:"p"},"null")," if no such files are found. The default implementation considers each of ",(0,l.mdx)("a",{parentName:"p",href:"/docs/configuration#assetresolutions"},(0,l.mdx)("inlineCode",{parentName:"a"},"resolver.assetResolutions"))," and uses the ",(0,l.mdx)("inlineCode",{parentName:"p"},"${assetName}@${resolution}${extension}")," format for asset variant file names."),(0,l.mdx)("p",null,"See also ",(0,l.mdx)("a",{parentName:"p",href:"https://reactnative.dev/docs/images#static-image-resources"},"Static Image Resources")," in the React Native docs."),(0,l.mdx)("h4",{id:"sourceexts-readonlyarraystring"},(0,l.mdx)("inlineCode",{parentName:"h4"},"sourceExts: $ReadOnlyArray<string>")),(0,l.mdx)("p",null,"The list of file extensions to try, in order, when resolving a module path that does not exist on disk. Defaults to ",(0,l.mdx)("a",{parentName:"p",href:"/docs/configuration#sourceexts"},(0,l.mdx)("inlineCode",{parentName:"a"},"resolver.sourceExts")),"."),(0,l.mdx)("h4",{id:"mainfields-readonlyarraystring"},(0,l.mdx)("inlineCode",{parentName:"h4"},"mainFields: $ReadOnlyArray<string>")),(0,l.mdx)("p",null,"The ordered list of fields in ",(0,l.mdx)("inlineCode",{parentName:"p"},"package.json")," that should be read to resolve a package's main entry point (and any subpath file replacements) per the ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/defunctzombie/package-browser-field-spec"},'"browser" field spec'),". Defaults to ",(0,l.mdx)("a",{parentName:"p",href:"/docs/configuration#resolvermainfields"},(0,l.mdx)("inlineCode",{parentName:"a"},"resolver.resolverMainFields")),"."),(0,l.mdx)("h4",{id:"getpackage-string--packagejson"},(0,l.mdx)("inlineCode",{parentName:"h4"},"getPackage: string => PackageJson")),(0,l.mdx)("p",null,"Given the path to a ",(0,l.mdx)("inlineCode",{parentName:"p"},"package.json")," file, returns the parsed file contents."),(0,l.mdx)("h4",{id:"getpackageformodule-absolutemodulepath-string--packageinfo-deprecated"},(0,l.mdx)("inlineCode",{parentName:"h4"},"getPackageForModule: (absoluteModulePath: string) => ?PackageInfo")," ",(0,l.mdx)("div",{class:"label deprecated"},"Deprecated")),(0,l.mdx)("p",null,"Given a candidate absolute module path that may exist under a package, locates and returns the closest package root (working upwards from the given path, stopping at the nearest ",(0,l.mdx)("inlineCode",{parentName:"p"},"node_modules"),"), parsed ",(0,l.mdx)("inlineCode",{parentName:"p"},"package.json")," contents, and the package-relative path of the given path."),(0,l.mdx)("h4",{id:"resolvehastemodule-string--string"},(0,l.mdx)("inlineCode",{parentName:"h4"},"resolveHasteModule: string => ?string")),(0,l.mdx)("p",null,"Resolves a Haste module name to an absolute path. Returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"null")," if no such module exists."),(0,l.mdx)("p",null,"The default implementation of this function uses ",(0,l.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/metro-file-map"},"metro-file-map"),"'s ",(0,l.mdx)("inlineCode",{parentName:"p"},"getModule")," method."),(0,l.mdx)("h4",{id:"resolvehastepackage-string--string"},(0,l.mdx)("inlineCode",{parentName:"h4"},"resolveHastePackage: string => ?string")),(0,l.mdx)("p",null,"Resolves a Haste (global) package name to an absolute ",(0,l.mdx)("inlineCode",{parentName:"p"},"package.json")," path. Returns ",(0,l.mdx)("inlineCode",{parentName:"p"},"null")," if no such package exists."),(0,l.mdx)("p",null,"The default implementation of this function uses ",(0,l.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/metro-file-map"},"metro-file-map"),"'s ",(0,l.mdx)("inlineCode",{parentName:"p"},"getPackage")," method and can be turned on or off using ",(0,l.mdx)("a",{parentName:"p",href:"/docs/configuration#enableglobalpackages"},(0,l.mdx)("inlineCode",{parentName:"a"},"resolver.enableGlobalPackages")),"."),(0,l.mdx)("h4",{id:"allowhaste-boolean"},(0,l.mdx)("inlineCode",{parentName:"h4"},"allowHaste: boolean")),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"true")," if Haste resolutions are allowed in the current context, ",(0,l.mdx)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.mdx)("h4",{id:"disablehierarchicallookup-boolean"},(0,l.mdx)("inlineCode",{parentName:"h4"},"disableHierarchicalLookup: boolean")),(0,l.mdx)("p",null,"If ",(0,l.mdx)("inlineCode",{parentName:"p"},"true"),", the resolver should not perform lookup in ",(0,l.mdx)("inlineCode",{parentName:"p"},"node_modules")," directories per the Node resolution algorithm. Defaults to ",(0,l.mdx)("a",{parentName:"p",href:"/docs/configuration#disablehierarchicallookup"},(0,l.mdx)("inlineCode",{parentName:"a"},"resolver.disableHierarchicalLookup")),"."),(0,l.mdx)("h4",{id:"extranodemodules-string-string"},(0,l.mdx)("inlineCode",{parentName:"h4"},"extraNodeModules: ?{[string]: string}")),(0,l.mdx)("p",null,"A mapping of package names to directories that is consulted after the standard lookup through ",(0,l.mdx)("inlineCode",{parentName:"p"},"node_modules")," as well as any ",(0,l.mdx)("a",{parentName:"p",href:"#nodemodulespaths-readonlyarraystring"},(0,l.mdx)("inlineCode",{parentName:"a"},"nodeModulesPaths")),"."),(0,l.mdx)("h4",{id:"originmodulepath-string"},(0,l.mdx)("inlineCode",{parentName:"h4"},"originModulePath: string")),(0,l.mdx)("p",null,"The path to the current module, e.g. the one containing the ",(0,l.mdx)("inlineCode",{parentName:"p"},"import")," we are currently resolving."),(0,l.mdx)("h4",{id:"customresolveroptions-string-mixed"},(0,l.mdx)("inlineCode",{parentName:"h4"},"customResolverOptions: {[string]: mixed}")),(0,l.mdx)("p",null,"Any custom options passed to the resolver. By default, Metro populates this based on URL parameters in the bundle request, e.g. ",(0,l.mdx)("inlineCode",{parentName:"p"},"http://localhost:8081/index.bundle?resolver.key=value")," becomes ",(0,l.mdx)("inlineCode",{parentName:"p"},"{key: 'value'}"),"."),(0,l.mdx)("h4",{id:"resolverequest-customresolver"},(0,l.mdx)("inlineCode",{parentName:"h4"},"resolveRequest: CustomResolver")),(0,l.mdx)("p",null,"A alternative resolver function to which the current request may be delegated. Defaults to ",(0,l.mdx)("a",{parentName:"p",href:"/docs/configuration#resolvereqeuest"},(0,l.mdx)("inlineCode",{parentName:"a"},"resolver.resolveRequest")),"."),(0,l.mdx)("p",null,"Metro expects ",(0,l.mdx)("inlineCode",{parentName:"p"},"resolveRequest")," to have the following signature:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-flow"},"function resolveRequest(\n  context: ResolutionContext,\n  moduleName: string,\n  platform: string | null,\n): Resolution {\n  // ...\n}\n\ntype Resolution =\n  | {type: 'empty'}\n  | {type: 'sourceFile', filePath: string}\n  | {type: 'assetFiles', filePaths: $ReadOnlyArray<string>};\n")),(0,l.mdx)("p",null,"Returned paths (",(0,l.mdx)("inlineCode",{parentName:"p"},"filePath")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"filePaths"),") must be ",(0,l.mdx)("em",{parentName:"p"},"absolute")," and ",(0,l.mdx)("em",{parentName:"p"},"real"),", such as the ",(0,l.mdx)("inlineCode",{parentName:"p"},"realPath")," returned by  ",(0,l.mdx)("a",{parentName:"p",href:"#filesystemlookup-string--exists-true-type-fd-realpath-string--exists-false"},(0,l.mdx)("inlineCode",{parentName:"a"},"fileSystemLookup")),"."),(0,l.mdx)("p",null,"When calling the default resolver with a non-null ",(0,l.mdx)("inlineCode",{parentName:"p"},"resolveRequest")," function, it represents a custom resolver and will always be called, fully replacing the default resolution logic."),(0,l.mdx)("p",null,"Inside a custom resolver, ",(0,l.mdx)("inlineCode",{parentName:"p"},"resolveRequest")," is set to the default resolver function, for easy chaining and customization."),(0,l.mdx)("h4",{id:"dependency-dependency"},(0,l.mdx)("inlineCode",{parentName:"h4"},"dependency: ?Dependency")),(0,l.mdx)("p",null,"A dependency descriptor corresponding to the current resolution request. This is provided for diagnostic purposes ",(0,l.mdx)("em",{parentName:"p"},"only")," and may not be used for semantic purposes. See the ",(0,l.mdx)("a",{parentName:"p",href:"#caching"},"Caching")," section for more information."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-flow"},"type Dependency = {\n  // The literal name provided to a require or import call. For example 'foo' in\n  // case of `require('foo')`.\n  name: string,\n\n  data: {\n    // A locally unique key for this dependency within the origin module.\n    key: string,\n\n    // Source locations from the Babel AST, relative to the origin module, where\n    // this dependency was encountered. This may be an empty array.\n    locs: $ReadOnlyArray<BabelSourceLocation>,\n\n    asyncType: 'async' | 'prefetch' | 'weak' | null,\n\n    // Other properties are considered internal and may change in the future.\n    ...\n  },\n};\n")),(0,l.mdx)("h2",{id:"caching"},"Caching"),(0,l.mdx)("p",null,"Resolver results may be cached under the following conditions:"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"For given origin module paths ",(0,l.mdx)("em",{parentName:"li"},"A")," and ",(0,l.mdx)("em",{parentName:"li"},"B")," and target module name ",(0,l.mdx)("em",{parentName:"li"},"M"),", the resolution for ",(0,l.mdx)("em",{parentName:"li"},"M")," may be reused if ",(0,l.mdx)("strong",{parentName:"li"},"all")," of the following conditions hold:",(0,l.mdx)("ol",{parentName:"li"},(0,l.mdx)("li",{parentName:"ol"},(0,l.mdx)("em",{parentName:"li"},"A")," and ",(0,l.mdx)("em",{parentName:"li"},"B")," are in the same directory."),(0,l.mdx)("li",{parentName:"ol"},"The contents of ",(0,l.mdx)("a",{parentName:"li",href:"#dev"},(0,l.mdx)("inlineCode",{parentName:"a"},"dev"))," and ",(0,l.mdx)("a",{parentName:"li",href:"#customresolveroptions-string-mixed"},(0,l.mdx)("inlineCode",{parentName:"a"},"customResolverOptions"))," are equivalent ( = serialize to JSON the same) in both calls to the resolver."))),(0,l.mdx)("li",{parentName:"ol"},"Any cache of resolutions must be invalidated if any file in the project has changed.")),(0,l.mdx)("p",null,"Custom resolvers must adhere to these assumptions, e.g. they may not return different resolutions for origin modules in the same directory under the same ",(0,l.mdx)("inlineCode",{parentName:"p"},"customResolverOptions"),"."))}c.isMDXComponent=!0}}]);