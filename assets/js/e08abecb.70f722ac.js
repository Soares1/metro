"use strict";(self.webpackChunkmetro_website=self.webpackChunkmetro_website||[]).push([[3350],{81161:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>m,default:()=>x,frontMatter:()=>d,metadata:()=>l,toc:()=>u});var o=t(87462),n=t(63366),r=(t(67294),t(3905)),i=["components"],d={id:"module-api",title:"Module API"},m=void 0,l={unversionedId:"module-api",id:"module-api",title:"Module API",description:"Metro is designed to allow code written for Node (or for bundlers targeting the Web) to run mostly unmodified. The main APIs available to application code are listed below.",source:"@site/../docs/ModuleAPI.md",sourceDirName:".",slug:"/module-api",permalink:"/docs/module-api",draft:!1,editUrl:"https://github.com/facebook/metro/edit/main/docs/../docs/ModuleAPI.md",tags:[],version:"current",lastUpdatedAt:1730224955,formattedLastUpdatedAt:"Oct 29, 2024",frontMatter:{id:"module-api",title:"Module API"},sidebar:"docs",previous:{title:"Bundling API",permalink:"/docs/api"},next:{title:"Configuring Metro",permalink:"/docs/configuration"}},p={},u=[{value:"<code>require()</code>",id:"require",level:2},{value:"Advanced usage: <code>require</code> at runtime",id:"advanced-usage-require-at-runtime",level:3},{value:"<code>module.exports</code>",id:"moduleexports",level:2},{value:"ES Modules syntax (<code>import</code> and <code>export</code>)",id:"es-modules-syntax-import-and-export",level:2},{value:"<code>import()</code> (dynamic import)",id:"import-dynamic-import",level:2},{value:"<code>require.resolveWeak()</code>",id:"requireresolveweak",level:2}],s={toc:u},c="wrapper";function x(e){var a=e.components,t=(0,n.Z)(e,i);return(0,r.mdx)(c,(0,o.Z)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"Metro is designed to allow code written for Node (or for bundlers targeting the Web) to run mostly unmodified. The main APIs available to application code are listed below."),(0,r.mdx)("h2",{id:"require"},(0,r.mdx)("inlineCode",{parentName:"h2"},"require()")),(0,r.mdx)("p",null,"Similar to Node's ",(0,r.mdx)("a",{parentName:"p",href:"https://nodejs.org/api/modules.html#requireid"},(0,r.mdx)("inlineCode",{parentName:"a"},"require()"))," function. ",(0,r.mdx)("inlineCode",{parentName:"p"},"require()")," takes a module name (or path) and returns the result of evaluating that module's code. Modules referenced by ",(0,r.mdx)("inlineCode",{parentName:"p"},"require()")," will be added to the bundle."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"const localModule = require('./path/module');\nconst asset = require('./path/asset.png');\nconst jsonData = require('./path/data.json');\nconst {View} = require('react-native');\n")),(0,r.mdx)("p",null,"The argument to ",(0,r.mdx)("inlineCode",{parentName:"p"},"require()")," must be a compile-time constant. The ",(0,r.mdx)("a",{parentName:"p",href:"/docs/configuration#dynamicdepsinpackages"},(0,r.mdx)("inlineCode",{parentName:"a"},"dynamicDepsInPackages"))," config option controls whether calling ",(0,r.mdx)("inlineCode",{parentName:"p"},"require()")," with a non-constant argument will fail at build time or at runtime."),(0,r.mdx)("h3",{id:"advanced-usage-require-at-runtime"},"Advanced usage: ",(0,r.mdx)("inlineCode",{parentName:"h3"},"require")," at runtime"),(0,r.mdx)("p",null,"At build time, Metro ",(0,r.mdx)("a",{parentName:"p",href:"/docs/resolution"},"resolves")," module names to absolute paths and ",(0,r.mdx)("a",{parentName:"p",href:"/docs/configuration#createmoduleidfactory"},"assigns an opaque module ID")," to each one."),(0,r.mdx)("p",null,"At runtime, ",(0,r.mdx)("inlineCode",{parentName:"p"},"require")," refers to a function that takes an opaque module ID (",(0,r.mdx)("em",{parentName:"p"},"not")," a name or path) and returns a module. This can be useful if you already have a module ID returned by another module API, such as ",(0,r.mdx)("a",{parentName:"p",href:"#require-resolveweak"},(0,r.mdx)("inlineCode",{parentName:"a"},"require.resolveWeak")),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"const localModule = require('./path/module');\nconst id = require.resolveWeak('./path/module');\n// Bypass the restriction on non-constant require() arguments\nconst dynamicRequire = require;\ndynamicRequire(id) === localModule; // true\n")),(0,r.mdx)("h2",{id:"moduleexports"},(0,r.mdx)("inlineCode",{parentName:"h2"},"module.exports")),(0,r.mdx)("p",null,"Similar to ",(0,r.mdx)("a",{parentName:"p",href:"https://nodejs.org/api/modules.html#moduleexports"},(0,r.mdx)("inlineCode",{parentName:"a"},"module.exports"))," in Node. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"module.exports")," property holds the value ",(0,r.mdx)("inlineCode",{parentName:"p"},"require()")," will return for the current module after it finishes evaluating."),(0,r.mdx)("h2",{id:"es-modules-syntax-import-and-export"},"ES Modules syntax (",(0,r.mdx)("inlineCode",{parentName:"h2"},"import")," and ",(0,r.mdx)("inlineCode",{parentName:"h2"},"export"),")"),(0,r.mdx)("p",null,"We currently recommend the use of ",(0,r.mdx)("a",{parentName:"p",href:"https://babeljs.io/docs/babel-plugin-transform-modules-commonjs"},(0,r.mdx)("inlineCode",{parentName:"a"},"@babel/plugin-transform-modules-commonjs"))," in Metro projects to support ",(0,r.mdx)("inlineCode",{parentName:"p"},"import")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"export"),"."),(0,r.mdx)("admonition",{type:"note"},(0,r.mdx)("p",{parentName:"admonition"},"In React Native projects that use ",(0,r.mdx)("inlineCode",{parentName:"p"},"@react-native/babel-preset"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"import")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"export")," are supported out of the box.")),(0,r.mdx)("h2",{id:"import-dynamic-import"},(0,r.mdx)("inlineCode",{parentName:"h2"},"import()")," (dynamic import)"),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import"},(0,r.mdx)("inlineCode",{parentName:"a"},"import()"))," calls are supported out of the box. In React Native, using ",(0,r.mdx)("inlineCode",{parentName:"p"},"import()")," automatically splits your application code so that it loads faster during development, without affecting release builds."),(0,r.mdx)("admonition",{type:"info"},(0,r.mdx)("p",{parentName:"admonition"},(0,r.mdx)("strong",{parentName:"p"},"For framework implementers"),":"),(0,r.mdx)("ol",{parentName:"admonition"},(0,r.mdx)("li",{parentName:"ol"},"Enable ",(0,r.mdx)("a",{parentName:"li",href:"https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0605-lazy-bundling.md"},"lazy bundling")," by adding ",(0,r.mdx)("inlineCode",{parentName:"li"},"&lazy=true")," to the initial HTTP bundle URL your framework requests from Metro."),(0,r.mdx)("li",{parentName:"ol"},"At runtime, ",(0,r.mdx)("inlineCode",{parentName:"li"},"import()")," calls a framework-defined function to ",(0,r.mdx)("a",{parentName:"li",href:"https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0605-lazy-bundling.md#__loadbundleasync-in-metro"},"fetch and evaluate")," the split bundle. Your framework ",(0,r.mdx)("strong",{parentName:"li"},"must")," implement this function if it uses the ",(0,r.mdx)("inlineCode",{parentName:"li"},"lazy=true")," parameter, or runtime errors will occur."))),(0,r.mdx)("h2",{id:"requireresolveweak"},(0,r.mdx)("inlineCode",{parentName:"h2"},"require.resolveWeak()")),(0,r.mdx)("p",null,"Takes a module name (or path) and returns that module's opaque ID, without including it in the bundle. This is a specialised API intended to be used by frameworks; application code will rarely need to use it directly. See the section about ",(0,r.mdx)("a",{parentName:"p",href:"#advanced-usage-require-at-runtime"},"using ",(0,r.mdx)("inlineCode",{parentName:"a"},"require")," at runtime"),"."))}x.isMDXComponent=!0}}]);