"use strict";(self.webpackChunkmetro_website=self.webpackChunkmetro_website||[]).push([[371],{91041:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>x,frontMatter:()=>d,metadata:()=>p,toc:()=>m});var t=i(87462),a=i(63366),o=(i(67294),i(3905)),r=["components"],d={id:"api",title:"Bundling API"},l=void 0,p={unversionedId:"api",id:"api",title:"Bundling API",description:"Quick Start",source:"@site/../docs/API.md",sourceDirName:".",slug:"/api",permalink:"/docs/api",draft:!1,editUrl:"https://github.com/facebook/metro/edit/main/docs/../docs/API.md",tags:[],version:"current",lastUpdatedAt:1730485694,formattedLastUpdatedAt:"Nov 1, 2024",frontMatter:{id:"api",title:"Bundling API"},sidebar:"docs",previous:{title:"Concepts",permalink:"/docs/concepts"},next:{title:"Module API",permalink:"/docs/module-api"}},s={},m=[{value:"Quick Start",id:"quick-start",level:2},{value:"Reference",id:"reference",level:2},{value:"<code>loadConfig(&lt;options&gt;)</code>",id:"loadconfigoptions",level:3},{value:"<code>async runMetro(config)</code>",id:"async-runmetroconfig",level:3},{value:"<code>async runBuild(config, &lt;options&gt;)</code>",id:"async-runbuildconfig-options",level:3},{value:"<code>async runServer(config, &lt;options&gt;)</code>",id:"async-runserverconfig-options",level:3},{value:"<code>createConnectMiddleware(config, &lt;options&gt;)</code>",id:"createconnectmiddlewareconfig-options",level:3}],c={toc:m},u="wrapper";function x(e){var n=e.components,i=(0,a.Z)(e,r);return(0,o.mdx)(u,(0,t.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h2",{id:"quick-start"},"Quick Start"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Compile a file"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"const config = await Metro.loadConfig();\n\nawait Metro.runBuild(config, {\n  entry: 'index.js',\n  out: 'bundle.js',\n});\n"))),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Run a server and watch the filesystem for changes"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"const config = await Metro.loadConfig();\n\nawait Metro.runServer(config);\n"))),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Create a Connect middleware and plug it into a server"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"const Metro = require('metro');\nconst express = require('express');\nconst app = express();\nconst server = require('http').Server(app);\n\nMetro.loadConfig().then(async config => {\n  const connectMiddleware = await Metro.createConnectMiddleware(config);\n  const {server: {port}} = config;\n\n  app.use(connectMiddleware.middleware);\n  server.listen(port);\n  connectMiddleware.attachHmrServer(server);\n});\n")))),(0,o.mdx)("h2",{id:"reference"},"Reference"),(0,o.mdx)("p",null,"All functions exposed below accept an additional ",(0,o.mdx)("inlineCode",{parentName:"p"},"config")," option. This object should be the ",(0,o.mdx)("a",{parentName:"p",href:"/docs/cli"},"Metro configuration")," exposed by your ",(0,o.mdx)("inlineCode",{parentName:"p"},"metro.config.js")," file - you can obtain it using ",(0,o.mdx)("inlineCode",{parentName:"p"},"Metro.loadConfig"),"."),(0,o.mdx)("h3",{id:"loadconfigoptions"},(0,o.mdx)("inlineCode",{parentName:"h3"},"loadConfig(<options>)")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Basic options:")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"config"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"cwd")),(0,o.mdx)("p",null,"Load the Metro configuration, either from ",(0,o.mdx)("inlineCode",{parentName:"p"},"config")," in options if specified, or by traversing the directory hierarchy from ",(0,o.mdx)("inlineCode",{parentName:"p"},"cwd")," to the root until it finds a file (by default ",(0,o.mdx)("inlineCode",{parentName:"p"},"metro.config.js"),"). The returned configuration will have been normalized and merged with Metro's default values."),(0,o.mdx)("h3",{id:"async-runmetroconfig"},(0,o.mdx)("inlineCode",{parentName:"h3"},"async runMetro(config)")),(0,o.mdx)("p",null,"Creates a Metro server based on the config and returns it. You can use this as a middleware in your existing server."),(0,o.mdx)("h3",{id:"async-runbuildconfig-options"},(0,o.mdx)("inlineCode",{parentName:"h3"},"async runBuild(config, <options>)")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Required options:")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"entry"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"out")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Basic options:")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"dev"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"minify"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"platform"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"sourceMap"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"sourceMapUrl")),(0,o.mdx)("p",null,"Bundles ",(0,o.mdx)("inlineCode",{parentName:"p"},"entry")," for the given ",(0,o.mdx)("inlineCode",{parentName:"p"},"platform"),", and saves it to location ",(0,o.mdx)("inlineCode",{parentName:"p"},"out"),". If ",(0,o.mdx)("inlineCode",{parentName:"p"},"sourceMap")," is set, also generates a source map. The source map will be inlined, unless ",(0,o.mdx)("inlineCode",{parentName:"p"},"sourceMapUrl")," is also defined. In the latter case, a new file will be generated with the basename of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"sourceMapUrl")," parameter."),(0,o.mdx)("h3",{id:"async-runserverconfig-options"},(0,o.mdx)("inlineCode",{parentName:"h3"},"async runServer(config, <options>)")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Basic options:")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"host"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"port"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"secureServerOptions"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"secure (DEPRECATED)"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"secureKey (DEPRECATED)"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"secureCert (DEPRECATED)")),(0,o.mdx)("p",null,"Starts a full Metro HTTP server. It will listen on the specified ",(0,o.mdx)("inlineCode",{parentName:"p"},"host:port"),", and can then be queried to retrieve bundles for various entry points. If the ",(0,o.mdx)("inlineCode",{parentName:"p"},"secureServerOptions")," family of options are present, the server will be exposed over HTTPS."),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"secure"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"secureKey"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"secureCert")," are now deprecated and will be removed in a later release. The presence of ",(0,o.mdx)("inlineCode",{parentName:"p"},"secureServerOptions"),", along with its options will make Metro run over https."),(0,o.mdx)("h3",{id:"createconnectmiddlewareconfig-options"},(0,o.mdx)("inlineCode",{parentName:"h3"},"createConnectMiddleware(config, <options>)")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Basic options:")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"port"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"onBundleBuilt")),(0,o.mdx)("p",null,"Instead of creating the full server, creates a Connect middleware that answers to bundle requests. This middleware can then be plugged into your own servers. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"port")," parameter is optional and only used for logging purposes. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"onBundleBuilt")," function is optional, is passed the bundle name, and is called when the server has finishing creating the bundle."))}x.isMDXComponent=!0}}]);